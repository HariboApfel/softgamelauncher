name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc \
          libc6-dev \
          libgl1-mesa-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxxf86vm-dev \
          libasound2-dev \
          pkg-config

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run Go tests
      run: go test -v ./...

    - name: Test build - Path tests
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          go build -o test_paths.exe test_paths.go
          ./test_paths.exe
        else
          go build -o test_paths test_paths.go
          ./test_paths
        fi
      shell: bash

    - name: Test build - Console version
      env:
        CGO_ENABLED: 0
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          go build -ldflags "-s -w" -o gamelauncher_console.exe main_console.go
        else
          go build -ldflags "-s -w" -o gamelauncher_console main_console.go
        fi
      shell: bash

    - name: Test build - GUI version
      env:
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          go build -ldflags "-H windowsgui -s -w" -o gamelauncher.exe main.go
        else
          go build -ldflags "-s -w" -o gamelauncher main.go
        fi
      shell: bash

    - name: Verify builds exist
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls -la gamelauncher.exe gamelauncher_console.exe
        else
          ls -la gamelauncher gamelauncher_console
        fi
      shell: bash

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=10m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'