name: Build

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: ''
            binary: gamelauncher
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: '.exe'
            binary: gamelauncher.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc \
          libc6-dev \
          libgl1-mesa-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxxf86vm-dev \
          libasound2-dev \
          pkg-config

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # TDM-GCC is already available on GitHub Actions Windows runners
        Write-Host "Windows runner already has required dependencies"

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build GUI version
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          go build -ldflags "-H windowsgui -s -w" -o ${{ matrix.binary }} main.go
        else
          go build -ldflags "-s -w" -o ${{ matrix.binary }} main.go
        fi
      shell: bash

    - name: Create release package
      run: |
        mkdir -p release
        cp ${{ matrix.binary }} release/
        cp README.md release/ 2>/dev/null || true
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          chmod +x release/${{ matrix.binary }}
          cd release
          7z a -tzip ../gamelauncher-${{ matrix.goos }}-${{ matrix.goarch }}.zip *
        else
          chmod +x release/${{ matrix.binary }}
          cd release
          tar -czf ../gamelauncher-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz *
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gamelauncher-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          gamelauncher-${{ matrix.goos }}-${{ matrix.goarch }}.*
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    # Remove the condition to run on every push
    env:
      GH_TOKEN: ${{ github.token }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded artifacts
      run: find . -name "gamelauncher-*" -type f

    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Extract tag name from git ref (refs/tags/v1.0.0 -> v1.0.0)
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          # Auto-generate version based on date and commit
          DATE=$(date +'%Y.%m.%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag_name=v${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      run: |
        # Delete existing release if it exists (for development builds)
        if [[ "${{ steps.tag_name.outputs.tag_name }}" == v20* ]]; then
          gh release delete ${{ steps.tag_name.outputs.tag_name }} --yes 2>/dev/null || true
          git tag -d ${{ steps.tag_name.outputs.tag_name }} 2>/dev/null || true
          git push origin --delete ${{ steps.tag_name.outputs.tag_name }} 2>/dev/null || true
        fi
        
        gh release create ${{ steps.tag_name.outputs.tag_name }} \
          --title "Game Launcher ${{ steps.tag_name.outputs.tag_name }}" \
          --notes "## Game Launcher Release ${{ steps.tag_name.outputs.tag_name }}
          
          **Build Information:**
          - Commit: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - Branch: \`${{ github.ref_name }}\`
          - Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ### Downloads
          - **Windows**: \`gamelauncher-windows-amd64.zip\`
          - **Linux**: \`gamelauncher-linux-amd64.tar.gz\`
          
          ### What's included
          Each package contains:
          - \`gamelauncher\` (GUI version)
          - \`README.md\` (Documentation)
          
          ### Installation
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the application
          
          ### Requirements
          - **Windows**: Windows 10 or later
          - **Linux**: Modern Linux distribution with X11 or Wayland" \
          --draft=false \
          --prerelease=true

    - name: Upload Windows Release Asset
      run: |
        gh release upload ${{ steps.tag_name.outputs.tag_name }} \
          ./gamelauncher-windows-amd64/gamelauncher-windows-amd64.zip \
          --clobber

    - name: Upload Linux Release Asset
      run: |
        gh release upload ${{ steps.tag_name.outputs.tag_name }} \
          ./gamelauncher-linux-amd64/gamelauncher-linux-amd64.tar.gz \
          --clobber